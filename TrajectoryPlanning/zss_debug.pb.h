// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_debug.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zss_5fdebug_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zss_5fdebug_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 30010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 30010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zss_5fdebug_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zss_5fdebug_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fdebug_2eproto;
class Debug_Arc;
class Debug_ArcDefaultTypeInternal;
extern Debug_ArcDefaultTypeInternal _Debug_Arc_default_instance_;
class Debug_Curve;
class Debug_CurveDefaultTypeInternal;
extern Debug_CurveDefaultTypeInternal _Debug_Curve_default_instance_;
class Debug_Curve_;
class Debug_Curve_DefaultTypeInternal;
extern Debug_Curve_DefaultTypeInternal _Debug_Curve__default_instance_;
class Debug_Line;
class Debug_LineDefaultTypeInternal;
extern Debug_LineDefaultTypeInternal _Debug_Line_default_instance_;
class Debug_Msg;
class Debug_MsgDefaultTypeInternal;
extern Debug_MsgDefaultTypeInternal _Debug_Msg_default_instance_;
class Debug_Msgs;
class Debug_MsgsDefaultTypeInternal;
extern Debug_MsgsDefaultTypeInternal _Debug_Msgs_default_instance_;
class Debug_Points;
class Debug_PointsDefaultTypeInternal;
extern Debug_PointsDefaultTypeInternal _Debug_Points_default_instance_;
class Debug_Polygon;
class Debug_PolygonDefaultTypeInternal;
extern Debug_PolygonDefaultTypeInternal _Debug_Polygon_default_instance_;
class Debug_Robot;
class Debug_RobotDefaultTypeInternal;
extern Debug_RobotDefaultTypeInternal _Debug_Robot_default_instance_;
class Debug_Score;
class Debug_ScoreDefaultTypeInternal;
extern Debug_ScoreDefaultTypeInternal _Debug_Score_default_instance_;
class Debug_Scores;
class Debug_ScoresDefaultTypeInternal;
extern Debug_ScoresDefaultTypeInternal _Debug_Scores_default_instance_;
class Debug_Text;
class Debug_TextDefaultTypeInternal;
extern Debug_TextDefaultTypeInternal _Debug_Text_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class _Rectangle;
class _RectangleDefaultTypeInternal;
extern _RectangleDefaultTypeInternal __Rectangle_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Debug_Arc* Arena::CreateMaybeMessage<::Debug_Arc>(Arena*);
template<> ::Debug_Curve* Arena::CreateMaybeMessage<::Debug_Curve>(Arena*);
template<> ::Debug_Curve_* Arena::CreateMaybeMessage<::Debug_Curve_>(Arena*);
template<> ::Debug_Line* Arena::CreateMaybeMessage<::Debug_Line>(Arena*);
template<> ::Debug_Msg* Arena::CreateMaybeMessage<::Debug_Msg>(Arena*);
template<> ::Debug_Msgs* Arena::CreateMaybeMessage<::Debug_Msgs>(Arena*);
template<> ::Debug_Points* Arena::CreateMaybeMessage<::Debug_Points>(Arena*);
template<> ::Debug_Polygon* Arena::CreateMaybeMessage<::Debug_Polygon>(Arena*);
template<> ::Debug_Robot* Arena::CreateMaybeMessage<::Debug_Robot>(Arena*);
template<> ::Debug_Score* Arena::CreateMaybeMessage<::Debug_Score>(Arena*);
template<> ::Debug_Scores* Arena::CreateMaybeMessage<::Debug_Scores>(Arena*);
template<> ::Debug_Text* Arena::CreateMaybeMessage<::Debug_Text>(Arena*);
template<> ::Point* Arena::CreateMaybeMessage<::Point>(Arena*);
template<> ::_Rectangle* Arena::CreateMaybeMessage<::_Rectangle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Debug_Msg_Debug_Type : int {
  Debug_Msg_Debug_Type_ARC = 0,
  Debug_Msg_Debug_Type_LINE = 1,
  Debug_Msg_Debug_Type_TEXT = 2,
  Debug_Msg_Debug_Type_ROBOT = 3,
  Debug_Msg_Debug_Type_CURVE = 4,
  Debug_Msg_Debug_Type_POLYGON = 5,
  Debug_Msg_Debug_Type_Points = 6
};
bool Debug_Msg_Debug_Type_IsValid(int value);
constexpr Debug_Msg_Debug_Type Debug_Msg_Debug_Type_Debug_Type_MIN = Debug_Msg_Debug_Type_ARC;
constexpr Debug_Msg_Debug_Type Debug_Msg_Debug_Type_Debug_Type_MAX = Debug_Msg_Debug_Type_Points;
constexpr int Debug_Msg_Debug_Type_Debug_Type_ARRAYSIZE = Debug_Msg_Debug_Type_Debug_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Debug_Msg_Debug_Type_descriptor();
template<typename T>
inline const std::string& Debug_Msg_Debug_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Debug_Msg_Debug_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Debug_Msg_Debug_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Debug_Msg_Debug_Type_descriptor(), enum_t_value);
}
inline bool Debug_Msg_Debug_Type_Parse(
    const std::string& name, Debug_Msg_Debug_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Debug_Msg_Debug_Type>(
    Debug_Msg_Debug_Type_descriptor(), name, value);
}
enum Debug_Msg_Color : int {
  Debug_Msg_Color_WHITE = 0,
  Debug_Msg_Color_RED = 1,
  Debug_Msg_Color_ORANGE = 2,
  Debug_Msg_Color_YELLOW = 3,
  Debug_Msg_Color_GREEN = 4,
  Debug_Msg_Color_CYAN = 5,
  Debug_Msg_Color_BLUE = 6,
  Debug_Msg_Color_PURPLE = 7,
  Debug_Msg_Color_GRAY = 8,
  Debug_Msg_Color_BLACK = 9
};
bool Debug_Msg_Color_IsValid(int value);
constexpr Debug_Msg_Color Debug_Msg_Color_Color_MIN = Debug_Msg_Color_WHITE;
constexpr Debug_Msg_Color Debug_Msg_Color_Color_MAX = Debug_Msg_Color_BLACK;
constexpr int Debug_Msg_Color_Color_ARRAYSIZE = Debug_Msg_Color_Color_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Debug_Msg_Color_descriptor();
template<typename T>
inline const std::string& Debug_Msg_Color_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Debug_Msg_Color>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Debug_Msg_Color_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Debug_Msg_Color_descriptor(), enum_t_value);
}
inline bool Debug_Msg_Color_Parse(
    const std::string& name, Debug_Msg_Color* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Debug_Msg_Color>(
    Debug_Msg_Color_descriptor(), name, value);
}
// ===================================================================

class Point :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Point";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Point)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class _Rectangle :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:_Rectangle) */ {
 public:
  _Rectangle();
  virtual ~_Rectangle();

  _Rectangle(const _Rectangle& from);
  _Rectangle(_Rectangle&& from) noexcept
    : _Rectangle() {
    *this = ::std::move(from);
  }

  inline _Rectangle& operator=(const _Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  inline _Rectangle& operator=(_Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const _Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const _Rectangle* internal_default_instance() {
    return reinterpret_cast<const _Rectangle*>(
               &__Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(_Rectangle& a, _Rectangle& b) {
    a.Swap(&b);
  }
  inline void Swap(_Rectangle* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline _Rectangle* New() const final {
    return CreateMaybeMessage<_Rectangle>(nullptr);
  }

  _Rectangle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<_Rectangle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const _Rectangle& from);
  void MergeFrom(const _Rectangle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(_Rectangle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "_Rectangle";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoint1FieldNumber = 1,
    kPoint2FieldNumber = 2,
  };
  // required .Point point1 = 1;
  bool has_point1() const;
  private:
  bool _internal_has_point1() const;
  public:
  void clear_point1();
  const ::Point& point1() const;
  ::Point* release_point1();
  ::Point* mutable_point1();
  void set_allocated_point1(::Point* point1);
  private:
  const ::Point& _internal_point1() const;
  ::Point* _internal_mutable_point1();
  public:

  // required .Point point2 = 2;
  bool has_point2() const;
  private:
  bool _internal_has_point2() const;
  public:
  void clear_point2();
  const ::Point& point2() const;
  ::Point* release_point2();
  ::Point* mutable_point2();
  void set_allocated_point2(::Point* point2);
  private:
  const ::Point& _internal_point2() const;
  ::Point* _internal_mutable_point2();
  public:

  // @@protoc_insertion_point(class_scope:_Rectangle)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Point* point1_;
  ::Point* point2_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Robot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Robot) */ {
 public:
  Debug_Robot();
  virtual ~Debug_Robot();

  Debug_Robot(const Debug_Robot& from);
  Debug_Robot(Debug_Robot&& from) noexcept
    : Debug_Robot() {
    *this = ::std::move(from);
  }

  inline Debug_Robot& operator=(const Debug_Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Robot& operator=(Debug_Robot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Robot* internal_default_instance() {
    return reinterpret_cast<const Debug_Robot*>(
               &_Debug_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Debug_Robot& a, Debug_Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Robot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Robot* New() const final {
    return CreateMaybeMessage<Debug_Robot>(nullptr);
  }

  Debug_Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Robot& from);
  void MergeFrom(const Debug_Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Robot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 1,
    kDirFieldNumber = 2,
  };
  // required .Point pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Point& pos() const;
  ::Point* release_pos();
  ::Point* mutable_pos();
  void set_allocated_pos(::Point* pos);
  private:
  const ::Point& _internal_pos() const;
  ::Point* _internal_mutable_pos();
  public:

  // required float dir = 2;
  bool has_dir() const;
  private:
  bool _internal_has_dir() const;
  public:
  void clear_dir();
  float dir() const;
  void set_dir(float value);
  private:
  float _internal_dir() const;
  void _internal_set_dir(float value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Robot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Point* pos_;
  float dir_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Line :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Line) */ {
 public:
  Debug_Line();
  virtual ~Debug_Line();

  Debug_Line(const Debug_Line& from);
  Debug_Line(Debug_Line&& from) noexcept
    : Debug_Line() {
    *this = ::std::move(from);
  }

  inline Debug_Line& operator=(const Debug_Line& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Line& operator=(Debug_Line&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Line* internal_default_instance() {
    return reinterpret_cast<const Debug_Line*>(
               &_Debug_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Debug_Line& a, Debug_Line& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Line* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Line* New() const final {
    return CreateMaybeMessage<Debug_Line>(nullptr);
  }

  Debug_Line* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Line>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Line& from);
  void MergeFrom(const Debug_Line& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Line* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Line";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kFORWARDFieldNumber = 3,
    kBACKFieldNumber = 4,
  };
  // required .Point start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Point& start() const;
  ::Point* release_start();
  ::Point* mutable_start();
  void set_allocated_start(::Point* start);
  private:
  const ::Point& _internal_start() const;
  ::Point* _internal_mutable_start();
  public:

  // required .Point end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::Point& end() const;
  ::Point* release_end();
  ::Point* mutable_end();
  void set_allocated_end(::Point* end);
  private:
  const ::Point& _internal_end() const;
  ::Point* _internal_mutable_end();
  public:

  // required bool FORWARD = 3;
  bool has_forward() const;
  private:
  bool _internal_has_forward() const;
  public:
  void clear_forward();
  bool forward() const;
  void set_forward(bool value);
  private:
  bool _internal_forward() const;
  void _internal_set_forward(bool value);
  public:

  // required bool BACK = 4;
  bool has_back() const;
  private:
  bool _internal_has_back() const;
  public:
  void clear_back();
  bool back() const;
  void set_back(bool value);
  private:
  bool _internal_back() const;
  void _internal_set_back(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Line)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Point* start_;
  ::Point* end_;
  bool forward_;
  bool back_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Arc :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Arc) */ {
 public:
  Debug_Arc();
  virtual ~Debug_Arc();

  Debug_Arc(const Debug_Arc& from);
  Debug_Arc(Debug_Arc&& from) noexcept
    : Debug_Arc() {
    *this = ::std::move(from);
  }

  inline Debug_Arc& operator=(const Debug_Arc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Arc& operator=(Debug_Arc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Arc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Arc* internal_default_instance() {
    return reinterpret_cast<const Debug_Arc*>(
               &_Debug_Arc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Debug_Arc& a, Debug_Arc& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Arc* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Arc* New() const final {
    return CreateMaybeMessage<Debug_Arc>(nullptr);
  }

  Debug_Arc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Arc>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Arc& from);
  void MergeFrom(const Debug_Arc& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Arc* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Arc";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectangleFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kFILLFieldNumber = 4,
  };
  // required ._Rectangle rectangle = 1;
  bool has_rectangle() const;
  private:
  bool _internal_has_rectangle() const;
  public:
  void clear_rectangle();
  const ::_Rectangle& rectangle() const;
  ::_Rectangle* release_rectangle();
  ::_Rectangle* mutable_rectangle();
  void set_allocated_rectangle(::_Rectangle* rectangle);
  private:
  const ::_Rectangle& _internal_rectangle() const;
  ::_Rectangle* _internal_mutable_rectangle();
  public:

  // required float start = 2;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  float start() const;
  void set_start(float value);
  private:
  float _internal_start() const;
  void _internal_set_start(float value);
  public:

  // required float end = 3;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  float end() const;
  void set_end(float value);
  private:
  float _internal_end() const;
  void _internal_set_end(float value);
  public:

  // required bool FILL = 4;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  bool fill() const;
  void set_fill(bool value);
  private:
  bool _internal_fill() const;
  void _internal_set_fill(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Arc)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::_Rectangle* rectangle_;
  float start_;
  float end_;
  bool fill_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Polygon :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Polygon) */ {
 public:
  Debug_Polygon();
  virtual ~Debug_Polygon();

  Debug_Polygon(const Debug_Polygon& from);
  Debug_Polygon(Debug_Polygon&& from) noexcept
    : Debug_Polygon() {
    *this = ::std::move(from);
  }

  inline Debug_Polygon& operator=(const Debug_Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Polygon& operator=(Debug_Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Polygon* internal_default_instance() {
    return reinterpret_cast<const Debug_Polygon*>(
               &_Debug_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Debug_Polygon& a, Debug_Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Polygon* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Polygon* New() const final {
    return CreateMaybeMessage<Debug_Polygon>(nullptr);
  }

  Debug_Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Polygon& from);
  void MergeFrom(const Debug_Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Polygon";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVertexFieldNumber = 1,
    kFILLFieldNumber = 2,
  };
  // repeated .Point vertex = 1;
  int vertex_size() const;
  private:
  int _internal_vertex_size() const;
  public:
  void clear_vertex();
  ::Point* mutable_vertex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
      mutable_vertex();
  private:
  const ::Point& _internal_vertex(int index) const;
  ::Point* _internal_add_vertex();
  public:
  const ::Point& vertex(int index) const;
  ::Point* add_vertex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
      vertex() const;

  // required bool FILL = 2;
  bool has_fill() const;
  private:
  bool _internal_has_fill() const;
  public:
  void clear_fill();
  bool fill() const;
  void set_fill(bool value);
  private:
  bool _internal_fill() const;
  void _internal_set_fill(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Polygon)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point > vertex_;
  bool fill_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Text :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Text) */ {
 public:
  Debug_Text();
  virtual ~Debug_Text();

  Debug_Text(const Debug_Text& from);
  Debug_Text(Debug_Text&& from) noexcept
    : Debug_Text() {
    *this = ::std::move(from);
  }

  inline Debug_Text& operator=(const Debug_Text& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Text& operator=(Debug_Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Text* internal_default_instance() {
    return reinterpret_cast<const Debug_Text*>(
               &_Debug_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Debug_Text& a, Debug_Text& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Text* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Text* New() const final {
    return CreateMaybeMessage<Debug_Text>(nullptr);
  }

  Debug_Text* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Text>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Text& from);
  void MergeFrom(const Debug_Text& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Text* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Text";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 2,
    kPosFieldNumber = 1,
  };
  // required string text = 2;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // required .Point pos = 1;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Point& pos() const;
  ::Point* release_pos();
  ::Point* mutable_pos();
  void set_allocated_pos(::Point* pos);
  private:
  const ::Point& _internal_pos() const;
  ::Point* _internal_mutable_pos();
  public:

  // @@protoc_insertion_point(class_scope:Debug_Text)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::Point* pos_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Curve_ :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Curve_) */ {
 public:
  Debug_Curve_();
  virtual ~Debug_Curve_();

  Debug_Curve_(const Debug_Curve_& from);
  Debug_Curve_(Debug_Curve_&& from) noexcept
    : Debug_Curve_() {
    *this = ::std::move(from);
  }

  inline Debug_Curve_& operator=(const Debug_Curve_& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Curve_& operator=(Debug_Curve_&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Curve_& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Curve_* internal_default_instance() {
    return reinterpret_cast<const Debug_Curve_*>(
               &_Debug_Curve__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Debug_Curve_& a, Debug_Curve_& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Curve_* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Curve_* New() const final {
    return CreateMaybeMessage<Debug_Curve_>(nullptr);
  }

  Debug_Curve_* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Curve_>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Curve_& from);
  void MergeFrom(const Debug_Curve_& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Curve_* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Curve_";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumFieldNumber = 1,
    kMaxLimitFieldNumber = 2,
    kMinLimitFieldNumber = 3,
  };
  // required float num = 1;
  bool has_num() const;
  private:
  bool _internal_has_num() const;
  public:
  void clear_num();
  float num() const;
  void set_num(float value);
  private:
  float _internal_num() const;
  void _internal_set_num(float value);
  public:

  // required float maxLimit = 2;
  bool has_maxlimit() const;
  private:
  bool _internal_has_maxlimit() const;
  public:
  void clear_maxlimit();
  float maxlimit() const;
  void set_maxlimit(float value);
  private:
  float _internal_maxlimit() const;
  void _internal_set_maxlimit(float value);
  public:

  // required float minLimit = 3;
  bool has_minlimit() const;
  private:
  bool _internal_has_minlimit() const;
  public:
  void clear_minlimit();
  float minlimit() const;
  void set_minlimit(float value);
  private:
  float _internal_minlimit() const;
  void _internal_set_minlimit(float value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Curve_)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float num_;
  float maxlimit_;
  float minlimit_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Curve :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Curve) */ {
 public:
  Debug_Curve();
  virtual ~Debug_Curve();

  Debug_Curve(const Debug_Curve& from);
  Debug_Curve(Debug_Curve&& from) noexcept
    : Debug_Curve() {
    *this = ::std::move(from);
  }

  inline Debug_Curve& operator=(const Debug_Curve& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Curve& operator=(Debug_Curve&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Curve& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Curve* internal_default_instance() {
    return reinterpret_cast<const Debug_Curve*>(
               &_Debug_Curve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Debug_Curve& a, Debug_Curve& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Curve* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Curve* New() const final {
    return CreateMaybeMessage<Debug_Curve>(nullptr);
  }

  Debug_Curve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Curve>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Curve& from);
  void MergeFrom(const Debug_Curve& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Curve* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Curve";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kP1FieldNumber = 2,
    kP2FieldNumber = 3,
    kEndFieldNumber = 4,
  };
  // required .Point start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::Point& start() const;
  ::Point* release_start();
  ::Point* mutable_start();
  void set_allocated_start(::Point* start);
  private:
  const ::Point& _internal_start() const;
  ::Point* _internal_mutable_start();
  public:

  // required .Point p1 = 2;
  bool has_p1() const;
  private:
  bool _internal_has_p1() const;
  public:
  void clear_p1();
  const ::Point& p1() const;
  ::Point* release_p1();
  ::Point* mutable_p1();
  void set_allocated_p1(::Point* p1);
  private:
  const ::Point& _internal_p1() const;
  ::Point* _internal_mutable_p1();
  public:

  // required .Point p2 = 3;
  bool has_p2() const;
  private:
  bool _internal_has_p2() const;
  public:
  void clear_p2();
  const ::Point& p2() const;
  ::Point* release_p2();
  ::Point* mutable_p2();
  void set_allocated_p2(::Point* p2);
  private:
  const ::Point& _internal_p2() const;
  ::Point* _internal_mutable_p2();
  public:

  // required .Point end = 4;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::Point& end() const;
  ::Point* release_end();
  ::Point* mutable_end();
  void set_allocated_end(::Point* end);
  private:
  const ::Point& _internal_end() const;
  ::Point* _internal_mutable_end();
  public:

  // @@protoc_insertion_point(class_scope:Debug_Curve)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Point* start_;
  ::Point* p1_;
  ::Point* p2_;
  ::Point* end_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Points :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Points) */ {
 public:
  Debug_Points();
  virtual ~Debug_Points();

  Debug_Points(const Debug_Points& from);
  Debug_Points(Debug_Points&& from) noexcept
    : Debug_Points() {
    *this = ::std::move(from);
  }

  inline Debug_Points& operator=(const Debug_Points& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Points& operator=(Debug_Points&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Points& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Points* internal_default_instance() {
    return reinterpret_cast<const Debug_Points*>(
               &_Debug_Points_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Debug_Points& a, Debug_Points& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Points* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Points* New() const final {
    return CreateMaybeMessage<Debug_Points>(nullptr);
  }

  Debug_Points* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Points>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Points& from);
  void MergeFrom(const Debug_Points& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Points* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Points";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // repeated .Point point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::Point* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
      mutable_point();
  private:
  const ::Point& _internal_point(int index) const;
  ::Point* _internal_add_point();
  public:
  const ::Point& point(int index) const;
  ::Point* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:Debug_Points)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point > point_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Msg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Msg) */ {
 public:
  Debug_Msg();
  virtual ~Debug_Msg();

  Debug_Msg(const Debug_Msg& from);
  Debug_Msg(Debug_Msg&& from) noexcept
    : Debug_Msg() {
    *this = ::std::move(from);
  }

  inline Debug_Msg& operator=(const Debug_Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Msg& operator=(Debug_Msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Msg* internal_default_instance() {
    return reinterpret_cast<const Debug_Msg*>(
               &_Debug_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Debug_Msg& a, Debug_Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Msg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Msg* New() const final {
    return CreateMaybeMessage<Debug_Msg>(nullptr);
  }

  Debug_Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Msg& from);
  void MergeFrom(const Debug_Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Msg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Debug_Msg_Debug_Type Debug_Type;
  static constexpr Debug_Type ARC =
    Debug_Msg_Debug_Type_ARC;
  static constexpr Debug_Type LINE =
    Debug_Msg_Debug_Type_LINE;
  static constexpr Debug_Type TEXT =
    Debug_Msg_Debug_Type_TEXT;
  static constexpr Debug_Type ROBOT =
    Debug_Msg_Debug_Type_ROBOT;
  static constexpr Debug_Type CURVE =
    Debug_Msg_Debug_Type_CURVE;
  static constexpr Debug_Type POLYGON =
    Debug_Msg_Debug_Type_POLYGON;
  static constexpr Debug_Type Points =
    Debug_Msg_Debug_Type_Points;
  static inline bool Debug_Type_IsValid(int value) {
    return Debug_Msg_Debug_Type_IsValid(value);
  }
  static constexpr Debug_Type Debug_Type_MIN =
    Debug_Msg_Debug_Type_Debug_Type_MIN;
  static constexpr Debug_Type Debug_Type_MAX =
    Debug_Msg_Debug_Type_Debug_Type_MAX;
  static constexpr int Debug_Type_ARRAYSIZE =
    Debug_Msg_Debug_Type_Debug_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Debug_Type_descriptor() {
    return Debug_Msg_Debug_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Debug_Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Debug_Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Debug_Type_Name.");
    return Debug_Msg_Debug_Type_Name(enum_t_value);
  }
  static inline bool Debug_Type_Parse(const std::string& name,
      Debug_Type* value) {
    return Debug_Msg_Debug_Type_Parse(name, value);
  }

  typedef Debug_Msg_Color Color;
  static constexpr Color WHITE =
    Debug_Msg_Color_WHITE;
  static constexpr Color RED =
    Debug_Msg_Color_RED;
  static constexpr Color ORANGE =
    Debug_Msg_Color_ORANGE;
  static constexpr Color YELLOW =
    Debug_Msg_Color_YELLOW;
  static constexpr Color GREEN =
    Debug_Msg_Color_GREEN;
  static constexpr Color CYAN =
    Debug_Msg_Color_CYAN;
  static constexpr Color BLUE =
    Debug_Msg_Color_BLUE;
  static constexpr Color PURPLE =
    Debug_Msg_Color_PURPLE;
  static constexpr Color GRAY =
    Debug_Msg_Color_GRAY;
  static constexpr Color BLACK =
    Debug_Msg_Color_BLACK;
  static inline bool Color_IsValid(int value) {
    return Debug_Msg_Color_IsValid(value);
  }
  static constexpr Color Color_MIN =
    Debug_Msg_Color_Color_MIN;
  static constexpr Color Color_MAX =
    Debug_Msg_Color_Color_MAX;
  static constexpr int Color_ARRAYSIZE =
    Debug_Msg_Color_Color_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Color_descriptor() {
    return Debug_Msg_Color_descriptor();
  }
  template<typename T>
  static inline const std::string& Color_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Color>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Color_Name.");
    return Debug_Msg_Color_Name(enum_t_value);
  }
  static inline bool Color_Parse(const std::string& name,
      Color* value) {
    return Debug_Msg_Color_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArcFieldNumber = 3,
    kLineFieldNumber = 4,
    kTextFieldNumber = 5,
    kRobotFieldNumber = 6,
    kCurveFieldNumber = 7,
    kPolygonFieldNumber = 8,
    kPointsFieldNumber = 9,
    kTypeFieldNumber = 1,
    kColorFieldNumber = 2,
  };
  // optional .Debug_Arc arc = 3;
  bool has_arc() const;
  private:
  bool _internal_has_arc() const;
  public:
  void clear_arc();
  const ::Debug_Arc& arc() const;
  ::Debug_Arc* release_arc();
  ::Debug_Arc* mutable_arc();
  void set_allocated_arc(::Debug_Arc* arc);
  private:
  const ::Debug_Arc& _internal_arc() const;
  ::Debug_Arc* _internal_mutable_arc();
  public:

  // optional .Debug_Line line = 4;
  bool has_line() const;
  private:
  bool _internal_has_line() const;
  public:
  void clear_line();
  const ::Debug_Line& line() const;
  ::Debug_Line* release_line();
  ::Debug_Line* mutable_line();
  void set_allocated_line(::Debug_Line* line);
  private:
  const ::Debug_Line& _internal_line() const;
  ::Debug_Line* _internal_mutable_line();
  public:

  // optional .Debug_Text text = 5;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const ::Debug_Text& text() const;
  ::Debug_Text* release_text();
  ::Debug_Text* mutable_text();
  void set_allocated_text(::Debug_Text* text);
  private:
  const ::Debug_Text& _internal_text() const;
  ::Debug_Text* _internal_mutable_text();
  public:

  // optional .Debug_Robot robot = 6;
  bool has_robot() const;
  private:
  bool _internal_has_robot() const;
  public:
  void clear_robot();
  const ::Debug_Robot& robot() const;
  ::Debug_Robot* release_robot();
  ::Debug_Robot* mutable_robot();
  void set_allocated_robot(::Debug_Robot* robot);
  private:
  const ::Debug_Robot& _internal_robot() const;
  ::Debug_Robot* _internal_mutable_robot();
  public:

  // optional .Debug_Curve_ curve = 7;
  bool has_curve() const;
  private:
  bool _internal_has_curve() const;
  public:
  void clear_curve();
  const ::Debug_Curve_& curve() const;
  ::Debug_Curve_* release_curve();
  ::Debug_Curve_* mutable_curve();
  void set_allocated_curve(::Debug_Curve_* curve);
  private:
  const ::Debug_Curve_& _internal_curve() const;
  ::Debug_Curve_* _internal_mutable_curve();
  public:

  // optional .Debug_Polygon polygon = 8;
  bool has_polygon() const;
  private:
  bool _internal_has_polygon() const;
  public:
  void clear_polygon();
  const ::Debug_Polygon& polygon() const;
  ::Debug_Polygon* release_polygon();
  ::Debug_Polygon* mutable_polygon();
  void set_allocated_polygon(::Debug_Polygon* polygon);
  private:
  const ::Debug_Polygon& _internal_polygon() const;
  ::Debug_Polygon* _internal_mutable_polygon();
  public:

  // optional .Debug_Points points = 9;
  bool has_points() const;
  private:
  bool _internal_has_points() const;
  public:
  void clear_points();
  const ::Debug_Points& points() const;
  ::Debug_Points* release_points();
  ::Debug_Points* mutable_points();
  void set_allocated_points(::Debug_Points* points);
  private:
  const ::Debug_Points& _internal_points() const;
  ::Debug_Points* _internal_mutable_points();
  public:

  // required .Debug_Msg.Debug_Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::Debug_Msg_Debug_Type type() const;
  void set_type(::Debug_Msg_Debug_Type value);
  private:
  ::Debug_Msg_Debug_Type _internal_type() const;
  void _internal_set_type(::Debug_Msg_Debug_Type value);
  public:

  // required .Debug_Msg.Color color = 2;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::Debug_Msg_Color color() const;
  void set_color(::Debug_Msg_Color value);
  private:
  ::Debug_Msg_Color _internal_color() const;
  void _internal_set_color(::Debug_Msg_Color value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Msg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::Debug_Arc* arc_;
  ::Debug_Line* line_;
  ::Debug_Text* text_;
  ::Debug_Robot* robot_;
  ::Debug_Curve_* curve_;
  ::Debug_Polygon* polygon_;
  ::Debug_Points* points_;
  int type_;
  int color_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Msgs :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Msgs) */ {
 public:
  Debug_Msgs();
  virtual ~Debug_Msgs();

  Debug_Msgs(const Debug_Msgs& from);
  Debug_Msgs(Debug_Msgs&& from) noexcept
    : Debug_Msgs() {
    *this = ::std::move(from);
  }

  inline Debug_Msgs& operator=(const Debug_Msgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Msgs& operator=(Debug_Msgs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Msgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Msgs* internal_default_instance() {
    return reinterpret_cast<const Debug_Msgs*>(
               &_Debug_Msgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Debug_Msgs& a, Debug_Msgs& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Msgs* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Msgs* New() const final {
    return CreateMaybeMessage<Debug_Msgs>(nullptr);
  }

  Debug_Msgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Msgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Msgs& from);
  void MergeFrom(const Debug_Msgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Msgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Msgs";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .Debug_Msg msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::Debug_Msg* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Msg >*
      mutable_msgs();
  private:
  const ::Debug_Msg& _internal_msgs(int index) const;
  ::Debug_Msg* _internal_add_msgs();
  public:
  const ::Debug_Msg& msgs(int index) const;
  ::Debug_Msg* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Msg >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:Debug_Msgs)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Msg > msgs_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Score :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Score) */ {
 public:
  Debug_Score();
  virtual ~Debug_Score();

  Debug_Score(const Debug_Score& from);
  Debug_Score(Debug_Score&& from) noexcept
    : Debug_Score() {
    *this = ::std::move(from);
  }

  inline Debug_Score& operator=(const Debug_Score& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Score& operator=(Debug_Score&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Score& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Score* internal_default_instance() {
    return reinterpret_cast<const Debug_Score*>(
               &_Debug_Score_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Debug_Score& a, Debug_Score& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Score* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Score* New() const final {
    return CreateMaybeMessage<Debug_Score>(nullptr);
  }

  Debug_Score* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Score>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Score& from);
  void MergeFrom(const Debug_Score& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Score* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Score";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 2,
    kColorFieldNumber = 1,
  };
  // repeated .Point p = 2;
  int p_size() const;
  private:
  int _internal_p_size() const;
  public:
  void clear_p();
  ::Point* mutable_p(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
      mutable_p();
  private:
  const ::Point& _internal_p(int index) const;
  ::Point* _internal_add_p();
  public:
  const ::Point& p(int index) const;
  ::Point* add_p();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
      p() const;

  // required int32 color = 1;
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Debug_Score)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point > p_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// -------------------------------------------------------------------

class Debug_Scores :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Debug_Scores) */ {
 public:
  Debug_Scores();
  virtual ~Debug_Scores();

  Debug_Scores(const Debug_Scores& from);
  Debug_Scores(Debug_Scores&& from) noexcept
    : Debug_Scores() {
    *this = ::std::move(from);
  }

  inline Debug_Scores& operator=(const Debug_Scores& from) {
    CopyFrom(from);
    return *this;
  }
  inline Debug_Scores& operator=(Debug_Scores&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Debug_Scores& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Debug_Scores* internal_default_instance() {
    return reinterpret_cast<const Debug_Scores*>(
               &_Debug_Scores_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Debug_Scores& a, Debug_Scores& b) {
    a.Swap(&b);
  }
  inline void Swap(Debug_Scores* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Debug_Scores* New() const final {
    return CreateMaybeMessage<Debug_Scores>(nullptr);
  }

  Debug_Scores* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Debug_Scores>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Debug_Scores& from);
  void MergeFrom(const Debug_Scores& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Debug_Scores* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Debug_Scores";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fdebug_2eproto);
    return ::descriptor_table_zss_5fdebug_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoresFieldNumber = 1,
  };
  // repeated .Debug_Score scores = 1;
  int scores_size() const;
  private:
  int _internal_scores_size() const;
  public:
  void clear_scores();
  ::Debug_Score* mutable_scores(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Score >*
      mutable_scores();
  private:
  const ::Debug_Score& _internal_scores(int index) const;
  ::Debug_Score* _internal_add_scores();
  public:
  const ::Debug_Score& scores(int index) const;
  ::Debug_Score* add_scores();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Score >&
      scores() const;

  // @@protoc_insertion_point(class_scope:Debug_Scores)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Score > scores_;
  friend struct ::TableStruct_zss_5fdebug_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// required float x = 1;
inline bool Point::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point::has_x() const {
  return _internal_has_x();
}
inline void Point::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Point::_internal_x() const {
  return x_;
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Point.x)
}

// required float y = 2;
inline bool Point::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point::has_y() const {
  return _internal_has_y();
}
inline void Point::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Point::_internal_y() const {
  return y_;
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Point.y)
}

// -------------------------------------------------------------------

// _Rectangle

// required .Point point1 = 1;
inline bool _Rectangle::_internal_has_point1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || point1_ != nullptr);
  return value;
}
inline bool _Rectangle::has_point1() const {
  return _internal_has_point1();
}
inline void _Rectangle::clear_point1() {
  if (point1_ != nullptr) point1_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Point& _Rectangle::_internal_point1() const {
  const ::Point* p = point1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& _Rectangle::point1() const {
  // @@protoc_insertion_point(field_get:_Rectangle.point1)
  return _internal_point1();
}
inline ::Point* _Rectangle::release_point1() {
  // @@protoc_insertion_point(field_release:_Rectangle.point1)
  _has_bits_[0] &= ~0x00000001u;
  ::Point* temp = point1_;
  point1_ = nullptr;
  return temp;
}
inline ::Point* _Rectangle::_internal_mutable_point1() {
  _has_bits_[0] |= 0x00000001u;
  if (point1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    point1_ = p;
  }
  return point1_;
}
inline ::Point* _Rectangle::mutable_point1() {
  // @@protoc_insertion_point(field_mutable:_Rectangle.point1)
  return _internal_mutable_point1();
}
inline void _Rectangle::set_allocated_point1(::Point* point1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point1_;
  }
  if (point1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  point1_ = point1;
  // @@protoc_insertion_point(field_set_allocated:_Rectangle.point1)
}

// required .Point point2 = 2;
inline bool _Rectangle::_internal_has_point2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || point2_ != nullptr);
  return value;
}
inline bool _Rectangle::has_point2() const {
  return _internal_has_point2();
}
inline void _Rectangle::clear_point2() {
  if (point2_ != nullptr) point2_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Point& _Rectangle::_internal_point2() const {
  const ::Point* p = point2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& _Rectangle::point2() const {
  // @@protoc_insertion_point(field_get:_Rectangle.point2)
  return _internal_point2();
}
inline ::Point* _Rectangle::release_point2() {
  // @@protoc_insertion_point(field_release:_Rectangle.point2)
  _has_bits_[0] &= ~0x00000002u;
  ::Point* temp = point2_;
  point2_ = nullptr;
  return temp;
}
inline ::Point* _Rectangle::_internal_mutable_point2() {
  _has_bits_[0] |= 0x00000002u;
  if (point2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    point2_ = p;
  }
  return point2_;
}
inline ::Point* _Rectangle::mutable_point2() {
  // @@protoc_insertion_point(field_mutable:_Rectangle.point2)
  return _internal_mutable_point2();
}
inline void _Rectangle::set_allocated_point2(::Point* point2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point2_;
  }
  if (point2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  point2_ = point2;
  // @@protoc_insertion_point(field_set_allocated:_Rectangle.point2)
}

// -------------------------------------------------------------------

// Debug_Robot

// required .Point pos = 1;
inline bool Debug_Robot::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool Debug_Robot::has_pos() const {
  return _internal_has_pos();
}
inline void Debug_Robot::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Point& Debug_Robot::_internal_pos() const {
  const ::Point* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Robot::pos() const {
  // @@protoc_insertion_point(field_get:Debug_Robot.pos)
  return _internal_pos();
}
inline ::Point* Debug_Robot::release_pos() {
  // @@protoc_insertion_point(field_release:Debug_Robot.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::Point* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Point* Debug_Robot::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::Point* Debug_Robot::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Debug_Robot.pos)
  return _internal_mutable_pos();
}
inline void Debug_Robot::set_allocated_pos(::Point* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Debug_Robot.pos)
}

// required float dir = 2;
inline bool Debug_Robot::_internal_has_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Debug_Robot::has_dir() const {
  return _internal_has_dir();
}
inline void Debug_Robot::clear_dir() {
  dir_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Debug_Robot::_internal_dir() const {
  return dir_;
}
inline float Debug_Robot::dir() const {
  // @@protoc_insertion_point(field_get:Debug_Robot.dir)
  return _internal_dir();
}
inline void Debug_Robot::_internal_set_dir(float value) {
  _has_bits_[0] |= 0x00000002u;
  dir_ = value;
}
inline void Debug_Robot::set_dir(float value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:Debug_Robot.dir)
}

// -------------------------------------------------------------------

// Debug_Line

// required .Point start = 1;
inline bool Debug_Line::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool Debug_Line::has_start() const {
  return _internal_has_start();
}
inline void Debug_Line::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Point& Debug_Line::_internal_start() const {
  const ::Point* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Line::start() const {
  // @@protoc_insertion_point(field_get:Debug_Line.start)
  return _internal_start();
}
inline ::Point* Debug_Line::release_start() {
  // @@protoc_insertion_point(field_release:Debug_Line.start)
  _has_bits_[0] &= ~0x00000001u;
  ::Point* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::Point* Debug_Line::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000001u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    start_ = p;
  }
  return start_;
}
inline ::Point* Debug_Line::mutable_start() {
  // @@protoc_insertion_point(field_mutable:Debug_Line.start)
  return _internal_mutable_start();
}
inline void Debug_Line::set_allocated_start(::Point* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Debug_Line.start)
}

// required .Point end = 2;
inline bool Debug_Line::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool Debug_Line::has_end() const {
  return _internal_has_end();
}
inline void Debug_Line::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Point& Debug_Line::_internal_end() const {
  const ::Point* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Line::end() const {
  // @@protoc_insertion_point(field_get:Debug_Line.end)
  return _internal_end();
}
inline ::Point* Debug_Line::release_end() {
  // @@protoc_insertion_point(field_release:Debug_Line.end)
  _has_bits_[0] &= ~0x00000002u;
  ::Point* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::Point* Debug_Line::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000002u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    end_ = p;
  }
  return end_;
}
inline ::Point* Debug_Line::mutable_end() {
  // @@protoc_insertion_point(field_mutable:Debug_Line.end)
  return _internal_mutable_end();
}
inline void Debug_Line::set_allocated_end(::Point* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:Debug_Line.end)
}

// required bool FORWARD = 3;
inline bool Debug_Line::_internal_has_forward() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Debug_Line::has_forward() const {
  return _internal_has_forward();
}
inline void Debug_Line::clear_forward() {
  forward_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Debug_Line::_internal_forward() const {
  return forward_;
}
inline bool Debug_Line::forward() const {
  // @@protoc_insertion_point(field_get:Debug_Line.FORWARD)
  return _internal_forward();
}
inline void Debug_Line::_internal_set_forward(bool value) {
  _has_bits_[0] |= 0x00000004u;
  forward_ = value;
}
inline void Debug_Line::set_forward(bool value) {
  _internal_set_forward(value);
  // @@protoc_insertion_point(field_set:Debug_Line.FORWARD)
}

// required bool BACK = 4;
inline bool Debug_Line::_internal_has_back() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Debug_Line::has_back() const {
  return _internal_has_back();
}
inline void Debug_Line::clear_back() {
  back_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Debug_Line::_internal_back() const {
  return back_;
}
inline bool Debug_Line::back() const {
  // @@protoc_insertion_point(field_get:Debug_Line.BACK)
  return _internal_back();
}
inline void Debug_Line::_internal_set_back(bool value) {
  _has_bits_[0] |= 0x00000008u;
  back_ = value;
}
inline void Debug_Line::set_back(bool value) {
  _internal_set_back(value);
  // @@protoc_insertion_point(field_set:Debug_Line.BACK)
}

// -------------------------------------------------------------------

// Debug_Arc

// required ._Rectangle rectangle = 1;
inline bool Debug_Arc::_internal_has_rectangle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rectangle_ != nullptr);
  return value;
}
inline bool Debug_Arc::has_rectangle() const {
  return _internal_has_rectangle();
}
inline void Debug_Arc::clear_rectangle() {
  if (rectangle_ != nullptr) rectangle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::_Rectangle& Debug_Arc::_internal_rectangle() const {
  const ::_Rectangle* p = rectangle_;
  return p != nullptr ? *p : *reinterpret_cast<const ::_Rectangle*>(
      &::__Rectangle_default_instance_);
}
inline const ::_Rectangle& Debug_Arc::rectangle() const {
  // @@protoc_insertion_point(field_get:Debug_Arc.rectangle)
  return _internal_rectangle();
}
inline ::_Rectangle* Debug_Arc::release_rectangle() {
  // @@protoc_insertion_point(field_release:Debug_Arc.rectangle)
  _has_bits_[0] &= ~0x00000001u;
  ::_Rectangle* temp = rectangle_;
  rectangle_ = nullptr;
  return temp;
}
inline ::_Rectangle* Debug_Arc::_internal_mutable_rectangle() {
  _has_bits_[0] |= 0x00000001u;
  if (rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::_Rectangle>(GetArenaNoVirtual());
    rectangle_ = p;
  }
  return rectangle_;
}
inline ::_Rectangle* Debug_Arc::mutable_rectangle() {
  // @@protoc_insertion_point(field_mutable:Debug_Arc.rectangle)
  return _internal_mutable_rectangle();
}
inline void Debug_Arc::set_allocated_rectangle(::_Rectangle* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete rectangle_;
  }
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:Debug_Arc.rectangle)
}

// required float start = 2;
inline bool Debug_Arc::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Debug_Arc::has_start() const {
  return _internal_has_start();
}
inline void Debug_Arc::clear_start() {
  start_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Debug_Arc::_internal_start() const {
  return start_;
}
inline float Debug_Arc::start() const {
  // @@protoc_insertion_point(field_get:Debug_Arc.start)
  return _internal_start();
}
inline void Debug_Arc::_internal_set_start(float value) {
  _has_bits_[0] |= 0x00000002u;
  start_ = value;
}
inline void Debug_Arc::set_start(float value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:Debug_Arc.start)
}

// required float end = 3;
inline bool Debug_Arc::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Debug_Arc::has_end() const {
  return _internal_has_end();
}
inline void Debug_Arc::clear_end() {
  end_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Debug_Arc::_internal_end() const {
  return end_;
}
inline float Debug_Arc::end() const {
  // @@protoc_insertion_point(field_get:Debug_Arc.end)
  return _internal_end();
}
inline void Debug_Arc::_internal_set_end(float value) {
  _has_bits_[0] |= 0x00000004u;
  end_ = value;
}
inline void Debug_Arc::set_end(float value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:Debug_Arc.end)
}

// required bool FILL = 4;
inline bool Debug_Arc::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Debug_Arc::has_fill() const {
  return _internal_has_fill();
}
inline void Debug_Arc::clear_fill() {
  fill_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool Debug_Arc::_internal_fill() const {
  return fill_;
}
inline bool Debug_Arc::fill() const {
  // @@protoc_insertion_point(field_get:Debug_Arc.FILL)
  return _internal_fill();
}
inline void Debug_Arc::_internal_set_fill(bool value) {
  _has_bits_[0] |= 0x00000008u;
  fill_ = value;
}
inline void Debug_Arc::set_fill(bool value) {
  _internal_set_fill(value);
  // @@protoc_insertion_point(field_set:Debug_Arc.FILL)
}

// -------------------------------------------------------------------

// Debug_Polygon

// repeated .Point vertex = 1;
inline int Debug_Polygon::_internal_vertex_size() const {
  return vertex_.size();
}
inline int Debug_Polygon::vertex_size() const {
  return _internal_vertex_size();
}
inline void Debug_Polygon::clear_vertex() {
  vertex_.Clear();
}
inline ::Point* Debug_Polygon::mutable_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Polygon.vertex)
  return vertex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
Debug_Polygon::mutable_vertex() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Polygon.vertex)
  return &vertex_;
}
inline const ::Point& Debug_Polygon::_internal_vertex(int index) const {
  return vertex_.Get(index);
}
inline const ::Point& Debug_Polygon::vertex(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Polygon.vertex)
  return _internal_vertex(index);
}
inline ::Point* Debug_Polygon::_internal_add_vertex() {
  return vertex_.Add();
}
inline ::Point* Debug_Polygon::add_vertex() {
  // @@protoc_insertion_point(field_add:Debug_Polygon.vertex)
  return _internal_add_vertex();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
Debug_Polygon::vertex() const {
  // @@protoc_insertion_point(field_list:Debug_Polygon.vertex)
  return vertex_;
}

// required bool FILL = 2;
inline bool Debug_Polygon::_internal_has_fill() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Debug_Polygon::has_fill() const {
  return _internal_has_fill();
}
inline void Debug_Polygon::clear_fill() {
  fill_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Debug_Polygon::_internal_fill() const {
  return fill_;
}
inline bool Debug_Polygon::fill() const {
  // @@protoc_insertion_point(field_get:Debug_Polygon.FILL)
  return _internal_fill();
}
inline void Debug_Polygon::_internal_set_fill(bool value) {
  _has_bits_[0] |= 0x00000001u;
  fill_ = value;
}
inline void Debug_Polygon::set_fill(bool value) {
  _internal_set_fill(value);
  // @@protoc_insertion_point(field_set:Debug_Polygon.FILL)
}

// -------------------------------------------------------------------

// Debug_Text

// required .Point pos = 1;
inline bool Debug_Text::_internal_has_pos() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pos_ != nullptr);
  return value;
}
inline bool Debug_Text::has_pos() const {
  return _internal_has_pos();
}
inline void Debug_Text::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Point& Debug_Text::_internal_pos() const {
  const ::Point* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Text::pos() const {
  // @@protoc_insertion_point(field_get:Debug_Text.pos)
  return _internal_pos();
}
inline ::Point* Debug_Text::release_pos() {
  // @@protoc_insertion_point(field_release:Debug_Text.pos)
  _has_bits_[0] &= ~0x00000002u;
  ::Point* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Point* Debug_Text::_internal_mutable_pos() {
  _has_bits_[0] |= 0x00000002u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::Point* Debug_Text::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:Debug_Text.pos)
  return _internal_mutable_pos();
}
inline void Debug_Text::set_allocated_pos(::Point* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Debug_Text.pos)
}

// required string text = 2;
inline bool Debug_Text::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Debug_Text::has_text() const {
  return _internal_has_text();
}
inline void Debug_Text::clear_text() {
  text_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Debug_Text::text() const {
  // @@protoc_insertion_point(field_get:Debug_Text.text)
  return _internal_text();
}
inline void Debug_Text::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:Debug_Text.text)
}
inline std::string* Debug_Text::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Debug_Text.text)
  return _internal_mutable_text();
}
inline const std::string& Debug_Text::_internal_text() const {
  return text_.GetNoArena();
}
inline void Debug_Text::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Debug_Text::set_text(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Debug_Text.text)
}
inline void Debug_Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Debug_Text.text)
}
inline void Debug_Text::set_text(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Debug_Text.text)
}
inline std::string* Debug_Text::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Debug_Text::release_text() {
  // @@protoc_insertion_point(field_release:Debug_Text.text)
  if (!has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return text_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Debug_Text::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:Debug_Text.text)
}

// -------------------------------------------------------------------

// Debug_Curve_

// required float num = 1;
inline bool Debug_Curve_::_internal_has_num() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Debug_Curve_::has_num() const {
  return _internal_has_num();
}
inline void Debug_Curve_::clear_num() {
  num_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float Debug_Curve_::_internal_num() const {
  return num_;
}
inline float Debug_Curve_::num() const {
  // @@protoc_insertion_point(field_get:Debug_Curve_.num)
  return _internal_num();
}
inline void Debug_Curve_::_internal_set_num(float value) {
  _has_bits_[0] |= 0x00000001u;
  num_ = value;
}
inline void Debug_Curve_::set_num(float value) {
  _internal_set_num(value);
  // @@protoc_insertion_point(field_set:Debug_Curve_.num)
}

// required float maxLimit = 2;
inline bool Debug_Curve_::_internal_has_maxlimit() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Debug_Curve_::has_maxlimit() const {
  return _internal_has_maxlimit();
}
inline void Debug_Curve_::clear_maxlimit() {
  maxlimit_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float Debug_Curve_::_internal_maxlimit() const {
  return maxlimit_;
}
inline float Debug_Curve_::maxlimit() const {
  // @@protoc_insertion_point(field_get:Debug_Curve_.maxLimit)
  return _internal_maxlimit();
}
inline void Debug_Curve_::_internal_set_maxlimit(float value) {
  _has_bits_[0] |= 0x00000002u;
  maxlimit_ = value;
}
inline void Debug_Curve_::set_maxlimit(float value) {
  _internal_set_maxlimit(value);
  // @@protoc_insertion_point(field_set:Debug_Curve_.maxLimit)
}

// required float minLimit = 3;
inline bool Debug_Curve_::_internal_has_minlimit() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Debug_Curve_::has_minlimit() const {
  return _internal_has_minlimit();
}
inline void Debug_Curve_::clear_minlimit() {
  minlimit_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float Debug_Curve_::_internal_minlimit() const {
  return minlimit_;
}
inline float Debug_Curve_::minlimit() const {
  // @@protoc_insertion_point(field_get:Debug_Curve_.minLimit)
  return _internal_minlimit();
}
inline void Debug_Curve_::_internal_set_minlimit(float value) {
  _has_bits_[0] |= 0x00000004u;
  minlimit_ = value;
}
inline void Debug_Curve_::set_minlimit(float value) {
  _internal_set_minlimit(value);
  // @@protoc_insertion_point(field_set:Debug_Curve_.minLimit)
}

// -------------------------------------------------------------------

// Debug_Curve

// required .Point start = 1;
inline bool Debug_Curve::_internal_has_start() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || start_ != nullptr);
  return value;
}
inline bool Debug_Curve::has_start() const {
  return _internal_has_start();
}
inline void Debug_Curve::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Point& Debug_Curve::_internal_start() const {
  const ::Point* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Curve::start() const {
  // @@protoc_insertion_point(field_get:Debug_Curve.start)
  return _internal_start();
}
inline ::Point* Debug_Curve::release_start() {
  // @@protoc_insertion_point(field_release:Debug_Curve.start)
  _has_bits_[0] &= ~0x00000001u;
  ::Point* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::Point* Debug_Curve::_internal_mutable_start() {
  _has_bits_[0] |= 0x00000001u;
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    start_ = p;
  }
  return start_;
}
inline ::Point* Debug_Curve::mutable_start() {
  // @@protoc_insertion_point(field_mutable:Debug_Curve.start)
  return _internal_mutable_start();
}
inline void Debug_Curve::set_allocated_start(::Point* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Debug_Curve.start)
}

// required .Point p1 = 2;
inline bool Debug_Curve::_internal_has_p1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || p1_ != nullptr);
  return value;
}
inline bool Debug_Curve::has_p1() const {
  return _internal_has_p1();
}
inline void Debug_Curve::clear_p1() {
  if (p1_ != nullptr) p1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Point& Debug_Curve::_internal_p1() const {
  const ::Point* p = p1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Curve::p1() const {
  // @@protoc_insertion_point(field_get:Debug_Curve.p1)
  return _internal_p1();
}
inline ::Point* Debug_Curve::release_p1() {
  // @@protoc_insertion_point(field_release:Debug_Curve.p1)
  _has_bits_[0] &= ~0x00000002u;
  ::Point* temp = p1_;
  p1_ = nullptr;
  return temp;
}
inline ::Point* Debug_Curve::_internal_mutable_p1() {
  _has_bits_[0] |= 0x00000002u;
  if (p1_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    p1_ = p;
  }
  return p1_;
}
inline ::Point* Debug_Curve::mutable_p1() {
  // @@protoc_insertion_point(field_mutable:Debug_Curve.p1)
  return _internal_mutable_p1();
}
inline void Debug_Curve::set_allocated_p1(::Point* p1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p1_;
  }
  if (p1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  p1_ = p1;
  // @@protoc_insertion_point(field_set_allocated:Debug_Curve.p1)
}

// required .Point p2 = 3;
inline bool Debug_Curve::_internal_has_p2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || p2_ != nullptr);
  return value;
}
inline bool Debug_Curve::has_p2() const {
  return _internal_has_p2();
}
inline void Debug_Curve::clear_p2() {
  if (p2_ != nullptr) p2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Point& Debug_Curve::_internal_p2() const {
  const ::Point* p = p2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Curve::p2() const {
  // @@protoc_insertion_point(field_get:Debug_Curve.p2)
  return _internal_p2();
}
inline ::Point* Debug_Curve::release_p2() {
  // @@protoc_insertion_point(field_release:Debug_Curve.p2)
  _has_bits_[0] &= ~0x00000004u;
  ::Point* temp = p2_;
  p2_ = nullptr;
  return temp;
}
inline ::Point* Debug_Curve::_internal_mutable_p2() {
  _has_bits_[0] |= 0x00000004u;
  if (p2_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    p2_ = p;
  }
  return p2_;
}
inline ::Point* Debug_Curve::mutable_p2() {
  // @@protoc_insertion_point(field_mutable:Debug_Curve.p2)
  return _internal_mutable_p2();
}
inline void Debug_Curve::set_allocated_p2(::Point* p2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete p2_;
  }
  if (p2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      p2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  p2_ = p2;
  // @@protoc_insertion_point(field_set_allocated:Debug_Curve.p2)
}

// required .Point end = 4;
inline bool Debug_Curve::_internal_has_end() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || end_ != nullptr);
  return value;
}
inline bool Debug_Curve::has_end() const {
  return _internal_has_end();
}
inline void Debug_Curve::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Point& Debug_Curve::_internal_end() const {
  const ::Point* p = end_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Point*>(
      &::_Point_default_instance_);
}
inline const ::Point& Debug_Curve::end() const {
  // @@protoc_insertion_point(field_get:Debug_Curve.end)
  return _internal_end();
}
inline ::Point* Debug_Curve::release_end() {
  // @@protoc_insertion_point(field_release:Debug_Curve.end)
  _has_bits_[0] &= ~0x00000008u;
  ::Point* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::Point* Debug_Curve::_internal_mutable_end() {
  _has_bits_[0] |= 0x00000008u;
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::Point>(GetArenaNoVirtual());
    end_ = p;
  }
  return end_;
}
inline ::Point* Debug_Curve::mutable_end() {
  // @@protoc_insertion_point(field_mutable:Debug_Curve.end)
  return _internal_mutable_end();
}
inline void Debug_Curve::set_allocated_end(::Point* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:Debug_Curve.end)
}

// -------------------------------------------------------------------

// Debug_Points

// repeated .Point point = 1;
inline int Debug_Points::_internal_point_size() const {
  return point_.size();
}
inline int Debug_Points::point_size() const {
  return _internal_point_size();
}
inline void Debug_Points::clear_point() {
  point_.Clear();
}
inline ::Point* Debug_Points::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Points.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
Debug_Points::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Points.point)
  return &point_;
}
inline const ::Point& Debug_Points::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::Point& Debug_Points::point(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Points.point)
  return _internal_point(index);
}
inline ::Point* Debug_Points::_internal_add_point() {
  return point_.Add();
}
inline ::Point* Debug_Points::add_point() {
  // @@protoc_insertion_point(field_add:Debug_Points.point)
  return _internal_add_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
Debug_Points::point() const {
  // @@protoc_insertion_point(field_list:Debug_Points.point)
  return point_;
}

// -------------------------------------------------------------------

// Debug_Msg

// required .Debug_Msg.Debug_Type type = 1;
inline bool Debug_Msg::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Debug_Msg::has_type() const {
  return _internal_has_type();
}
inline void Debug_Msg::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::Debug_Msg_Debug_Type Debug_Msg::_internal_type() const {
  return static_cast< ::Debug_Msg_Debug_Type >(type_);
}
inline ::Debug_Msg_Debug_Type Debug_Msg::type() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.type)
  return _internal_type();
}
inline void Debug_Msg::_internal_set_type(::Debug_Msg_Debug_Type value) {
  assert(::Debug_Msg_Debug_Type_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  type_ = value;
}
inline void Debug_Msg::set_type(::Debug_Msg_Debug_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Debug_Msg.type)
}

// required .Debug_Msg.Color color = 2;
inline bool Debug_Msg::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Debug_Msg::has_color() const {
  return _internal_has_color();
}
inline void Debug_Msg::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::Debug_Msg_Color Debug_Msg::_internal_color() const {
  return static_cast< ::Debug_Msg_Color >(color_);
}
inline ::Debug_Msg_Color Debug_Msg::color() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.color)
  return _internal_color();
}
inline void Debug_Msg::_internal_set_color(::Debug_Msg_Color value) {
  assert(::Debug_Msg_Color_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  color_ = value;
}
inline void Debug_Msg::set_color(::Debug_Msg_Color value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:Debug_Msg.color)
}

// optional .Debug_Arc arc = 3;
inline bool Debug_Msg::_internal_has_arc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || arc_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_arc() const {
  return _internal_has_arc();
}
inline void Debug_Msg::clear_arc() {
  if (arc_ != nullptr) arc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::Debug_Arc& Debug_Msg::_internal_arc() const {
  const ::Debug_Arc* p = arc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Arc*>(
      &::_Debug_Arc_default_instance_);
}
inline const ::Debug_Arc& Debug_Msg::arc() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.arc)
  return _internal_arc();
}
inline ::Debug_Arc* Debug_Msg::release_arc() {
  // @@protoc_insertion_point(field_release:Debug_Msg.arc)
  _has_bits_[0] &= ~0x00000001u;
  ::Debug_Arc* temp = arc_;
  arc_ = nullptr;
  return temp;
}
inline ::Debug_Arc* Debug_Msg::_internal_mutable_arc() {
  _has_bits_[0] |= 0x00000001u;
  if (arc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Arc>(GetArenaNoVirtual());
    arc_ = p;
  }
  return arc_;
}
inline ::Debug_Arc* Debug_Msg::mutable_arc() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.arc)
  return _internal_mutable_arc();
}
inline void Debug_Msg::set_allocated_arc(::Debug_Arc* arc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete arc_;
  }
  if (arc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      arc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, arc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  arc_ = arc;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.arc)
}

// optional .Debug_Line line = 4;
inline bool Debug_Msg::_internal_has_line() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || line_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_line() const {
  return _internal_has_line();
}
inline void Debug_Msg::clear_line() {
  if (line_ != nullptr) line_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::Debug_Line& Debug_Msg::_internal_line() const {
  const ::Debug_Line* p = line_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Line*>(
      &::_Debug_Line_default_instance_);
}
inline const ::Debug_Line& Debug_Msg::line() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.line)
  return _internal_line();
}
inline ::Debug_Line* Debug_Msg::release_line() {
  // @@protoc_insertion_point(field_release:Debug_Msg.line)
  _has_bits_[0] &= ~0x00000002u;
  ::Debug_Line* temp = line_;
  line_ = nullptr;
  return temp;
}
inline ::Debug_Line* Debug_Msg::_internal_mutable_line() {
  _has_bits_[0] |= 0x00000002u;
  if (line_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Line>(GetArenaNoVirtual());
    line_ = p;
  }
  return line_;
}
inline ::Debug_Line* Debug_Msg::mutable_line() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.line)
  return _internal_mutable_line();
}
inline void Debug_Msg::set_allocated_line(::Debug_Line* line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete line_;
  }
  if (line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  line_ = line;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.line)
}

// optional .Debug_Text text = 5;
inline bool Debug_Msg::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || text_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_text() const {
  return _internal_has_text();
}
inline void Debug_Msg::clear_text() {
  if (text_ != nullptr) text_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Debug_Text& Debug_Msg::_internal_text() const {
  const ::Debug_Text* p = text_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Text*>(
      &::_Debug_Text_default_instance_);
}
inline const ::Debug_Text& Debug_Msg::text() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.text)
  return _internal_text();
}
inline ::Debug_Text* Debug_Msg::release_text() {
  // @@protoc_insertion_point(field_release:Debug_Msg.text)
  _has_bits_[0] &= ~0x00000004u;
  ::Debug_Text* temp = text_;
  text_ = nullptr;
  return temp;
}
inline ::Debug_Text* Debug_Msg::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000004u;
  if (text_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Text>(GetArenaNoVirtual());
    text_ = p;
  }
  return text_;
}
inline ::Debug_Text* Debug_Msg::mutable_text() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.text)
  return _internal_mutable_text();
}
inline void Debug_Msg::set_allocated_text(::Debug_Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete text_;
  }
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.text)
}

// optional .Debug_Robot robot = 6;
inline bool Debug_Msg::_internal_has_robot() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || robot_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_robot() const {
  return _internal_has_robot();
}
inline void Debug_Msg::clear_robot() {
  if (robot_ != nullptr) robot_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::Debug_Robot& Debug_Msg::_internal_robot() const {
  const ::Debug_Robot* p = robot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Robot*>(
      &::_Debug_Robot_default_instance_);
}
inline const ::Debug_Robot& Debug_Msg::robot() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.robot)
  return _internal_robot();
}
inline ::Debug_Robot* Debug_Msg::release_robot() {
  // @@protoc_insertion_point(field_release:Debug_Msg.robot)
  _has_bits_[0] &= ~0x00000008u;
  ::Debug_Robot* temp = robot_;
  robot_ = nullptr;
  return temp;
}
inline ::Debug_Robot* Debug_Msg::_internal_mutable_robot() {
  _has_bits_[0] |= 0x00000008u;
  if (robot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Robot>(GetArenaNoVirtual());
    robot_ = p;
  }
  return robot_;
}
inline ::Debug_Robot* Debug_Msg::mutable_robot() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.robot)
  return _internal_mutable_robot();
}
inline void Debug_Msg::set_allocated_robot(::Debug_Robot* robot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete robot_;
  }
  if (robot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      robot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, robot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  robot_ = robot;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.robot)
}

// optional .Debug_Curve_ curve = 7;
inline bool Debug_Msg::_internal_has_curve() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || curve_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_curve() const {
  return _internal_has_curve();
}
inline void Debug_Msg::clear_curve() {
  if (curve_ != nullptr) curve_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::Debug_Curve_& Debug_Msg::_internal_curve() const {
  const ::Debug_Curve_* p = curve_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Curve_*>(
      &::_Debug_Curve__default_instance_);
}
inline const ::Debug_Curve_& Debug_Msg::curve() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.curve)
  return _internal_curve();
}
inline ::Debug_Curve_* Debug_Msg::release_curve() {
  // @@protoc_insertion_point(field_release:Debug_Msg.curve)
  _has_bits_[0] &= ~0x00000010u;
  ::Debug_Curve_* temp = curve_;
  curve_ = nullptr;
  return temp;
}
inline ::Debug_Curve_* Debug_Msg::_internal_mutable_curve() {
  _has_bits_[0] |= 0x00000010u;
  if (curve_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Curve_>(GetArenaNoVirtual());
    curve_ = p;
  }
  return curve_;
}
inline ::Debug_Curve_* Debug_Msg::mutable_curve() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.curve)
  return _internal_mutable_curve();
}
inline void Debug_Msg::set_allocated_curve(::Debug_Curve_* curve) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete curve_;
  }
  if (curve) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      curve = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curve, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  curve_ = curve;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.curve)
}

// optional .Debug_Polygon polygon = 8;
inline bool Debug_Msg::_internal_has_polygon() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || polygon_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_polygon() const {
  return _internal_has_polygon();
}
inline void Debug_Msg::clear_polygon() {
  if (polygon_ != nullptr) polygon_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::Debug_Polygon& Debug_Msg::_internal_polygon() const {
  const ::Debug_Polygon* p = polygon_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Polygon*>(
      &::_Debug_Polygon_default_instance_);
}
inline const ::Debug_Polygon& Debug_Msg::polygon() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.polygon)
  return _internal_polygon();
}
inline ::Debug_Polygon* Debug_Msg::release_polygon() {
  // @@protoc_insertion_point(field_release:Debug_Msg.polygon)
  _has_bits_[0] &= ~0x00000020u;
  ::Debug_Polygon* temp = polygon_;
  polygon_ = nullptr;
  return temp;
}
inline ::Debug_Polygon* Debug_Msg::_internal_mutable_polygon() {
  _has_bits_[0] |= 0x00000020u;
  if (polygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  return polygon_;
}
inline ::Debug_Polygon* Debug_Msg::mutable_polygon() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.polygon)
  return _internal_mutable_polygon();
}
inline void Debug_Msg::set_allocated_polygon(::Debug_Polygon* polygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete polygon_;
  }
  if (polygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      polygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.polygon)
}

// optional .Debug_Points points = 9;
inline bool Debug_Msg::_internal_has_points() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || points_ != nullptr);
  return value;
}
inline bool Debug_Msg::has_points() const {
  return _internal_has_points();
}
inline void Debug_Msg::clear_points() {
  if (points_ != nullptr) points_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::Debug_Points& Debug_Msg::_internal_points() const {
  const ::Debug_Points* p = points_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Debug_Points*>(
      &::_Debug_Points_default_instance_);
}
inline const ::Debug_Points& Debug_Msg::points() const {
  // @@protoc_insertion_point(field_get:Debug_Msg.points)
  return _internal_points();
}
inline ::Debug_Points* Debug_Msg::release_points() {
  // @@protoc_insertion_point(field_release:Debug_Msg.points)
  _has_bits_[0] &= ~0x00000040u;
  ::Debug_Points* temp = points_;
  points_ = nullptr;
  return temp;
}
inline ::Debug_Points* Debug_Msg::_internal_mutable_points() {
  _has_bits_[0] |= 0x00000040u;
  if (points_ == nullptr) {
    auto* p = CreateMaybeMessage<::Debug_Points>(GetArenaNoVirtual());
    points_ = p;
  }
  return points_;
}
inline ::Debug_Points* Debug_Msg::mutable_points() {
  // @@protoc_insertion_point(field_mutable:Debug_Msg.points)
  return _internal_mutable_points();
}
inline void Debug_Msg::set_allocated_points(::Debug_Points* points) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete points_;
  }
  if (points) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      points = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, points, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  points_ = points;
  // @@protoc_insertion_point(field_set_allocated:Debug_Msg.points)
}

// -------------------------------------------------------------------

// Debug_Msgs

// repeated .Debug_Msg msgs = 1;
inline int Debug_Msgs::_internal_msgs_size() const {
  return msgs_.size();
}
inline int Debug_Msgs::msgs_size() const {
  return _internal_msgs_size();
}
inline void Debug_Msgs::clear_msgs() {
  msgs_.Clear();
}
inline ::Debug_Msg* Debug_Msgs::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Msgs.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Msg >*
Debug_Msgs::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Msgs.msgs)
  return &msgs_;
}
inline const ::Debug_Msg& Debug_Msgs::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::Debug_Msg& Debug_Msgs::msgs(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Msgs.msgs)
  return _internal_msgs(index);
}
inline ::Debug_Msg* Debug_Msgs::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::Debug_Msg* Debug_Msgs::add_msgs() {
  // @@protoc_insertion_point(field_add:Debug_Msgs.msgs)
  return _internal_add_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Msg >&
Debug_Msgs::msgs() const {
  // @@protoc_insertion_point(field_list:Debug_Msgs.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// Debug_Score

// required int32 color = 1;
inline bool Debug_Score::_internal_has_color() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Debug_Score::has_color() const {
  return _internal_has_color();
}
inline void Debug_Score::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Debug_Score::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Debug_Score::color() const {
  // @@protoc_insertion_point(field_get:Debug_Score.color)
  return _internal_color();
}
inline void Debug_Score::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  color_ = value;
}
inline void Debug_Score::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:Debug_Score.color)
}

// repeated .Point p = 2;
inline int Debug_Score::_internal_p_size() const {
  return p_.size();
}
inline int Debug_Score::p_size() const {
  return _internal_p_size();
}
inline void Debug_Score::clear_p() {
  p_.Clear();
}
inline ::Point* Debug_Score::mutable_p(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Score.p)
  return p_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >*
Debug_Score::mutable_p() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Score.p)
  return &p_;
}
inline const ::Point& Debug_Score::_internal_p(int index) const {
  return p_.Get(index);
}
inline const ::Point& Debug_Score::p(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Score.p)
  return _internal_p(index);
}
inline ::Point* Debug_Score::_internal_add_p() {
  return p_.Add();
}
inline ::Point* Debug_Score::add_p() {
  // @@protoc_insertion_point(field_add:Debug_Score.p)
  return _internal_add_p();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Point >&
Debug_Score::p() const {
  // @@protoc_insertion_point(field_list:Debug_Score.p)
  return p_;
}

// -------------------------------------------------------------------

// Debug_Scores

// repeated .Debug_Score scores = 1;
inline int Debug_Scores::_internal_scores_size() const {
  return scores_.size();
}
inline int Debug_Scores::scores_size() const {
  return _internal_scores_size();
}
inline void Debug_Scores::clear_scores() {
  scores_.Clear();
}
inline ::Debug_Score* Debug_Scores::mutable_scores(int index) {
  // @@protoc_insertion_point(field_mutable:Debug_Scores.scores)
  return scores_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Score >*
Debug_Scores::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:Debug_Scores.scores)
  return &scores_;
}
inline const ::Debug_Score& Debug_Scores::_internal_scores(int index) const {
  return scores_.Get(index);
}
inline const ::Debug_Score& Debug_Scores::scores(int index) const {
  // @@protoc_insertion_point(field_get:Debug_Scores.scores)
  return _internal_scores(index);
}
inline ::Debug_Score* Debug_Scores::_internal_add_scores() {
  return scores_.Add();
}
inline ::Debug_Score* Debug_Scores::add_scores() {
  // @@protoc_insertion_point(field_add:Debug_Scores.scores)
  return _internal_add_scores();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Debug_Score >&
Debug_Scores::scores() const {
  // @@protoc_insertion_point(field_list:Debug_Scores.scores)
  return scores_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Debug_Msg_Debug_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Debug_Msg_Debug_Type>() {
  return ::Debug_Msg_Debug_Type_descriptor();
}
template <> struct is_proto_enum< ::Debug_Msg_Color> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Debug_Msg_Color>() {
  return ::Debug_Msg_Color_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zss_5fdebug_2eproto
